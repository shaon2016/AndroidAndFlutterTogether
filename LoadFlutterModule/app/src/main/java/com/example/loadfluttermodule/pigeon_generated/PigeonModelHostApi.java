// Autogenerated from Pigeon (v4.2.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.loadfluttermodule.pigeon_generated;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PigeonModelHostApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Person {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable Long age;
    public @Nullable Long getAge() { return age; }
    public void setAge(@Nullable Long setterArg) {
      this.age = setterArg;
    }

    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable Long age;
      public @NonNull Builder setAge(@Nullable Long setterArg) {
        this.age = setterArg;
        return this;
      }
      public @NonNull Person build() {
        Person pigeonReturn = new Person();
        pigeonReturn.setName(name);
        pigeonReturn.setAge(age);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(name);
      toListResult.add(age);
      return toListResult;
    }
    static @NonNull Person fromList(@NonNull ArrayList<Object> list) {
      Person pigeonResult = new Person();
      Object name = list.get(0);
      pigeonResult.setName((String)name);
      Object age = list.get(1);
      pigeonResult.setAge((age == null) ? null : ((age instanceof Integer) ? (Integer)age : (Long)age));
      return pigeonResult;
    }
  }
  private static class PigeonModelApiCodec extends StandardMessageCodec {
    public static final PigeonModelApiCodec INSTANCE = new PigeonModelApiCodec();
    private PigeonModelApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Person.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Person) {
        stream.write(128);
        writeValue(stream, ((Person) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PigeonModelApi {
    void activateSubmissionButton(@NonNull Boolean enabled);
    @NonNull Person getPerson();

    /** The codec used by PigeonModelApi. */
    static MessageCodec<Object> getCodec() {
      return       PigeonModelApiCodec.INSTANCE;    }
    /**Sets up an instance of `PigeonModelApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PigeonModelApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonModelApi.activateSubmissionButton", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.activateSubmissionButton(enabledArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonModelApi.getPerson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              Person output = api.getPerson();
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add("Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
