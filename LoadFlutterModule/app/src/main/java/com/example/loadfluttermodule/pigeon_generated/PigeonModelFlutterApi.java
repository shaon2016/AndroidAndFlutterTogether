// Autogenerated from Pigeon (v4.2.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.loadfluttermodule.pigeon_generated;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PigeonModelFlutterApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Employee {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      public @NonNull Employee build() {
        Employee pigeonReturn = new Employee();
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(name);
      return toListResult;
    }
    static @NonNull Employee fromList(@NonNull ArrayList<Object> list) {
      Employee pigeonResult = new Employee();
      Object name = list.get(0);
      pigeonResult.setName((String)name);
      return pigeonResult;
    }
  }
  private static class PigeonFlutterApiCodec extends StandardMessageCodec {
    public static final PigeonFlutterApiCodec INSTANCE = new PigeonFlutterApiCodec();
    private PigeonFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Employee.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Employee) {
        stream.write(128);
        writeValue(stream, ((Employee) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class PigeonFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public PigeonFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PigeonFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return       PigeonFlutterApiCodec.INSTANCE;
    }
    public void setEmployee(@NonNull Employee empArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PigeonFlutterApi.setEmployee", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(empArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add("Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
